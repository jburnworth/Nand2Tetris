class Paddle {
    field int x, y; // Screen location of paddles top-left corner
    field int sizeX, sizeY; // Size of paddle
    field int speed;

    constructor Paddle new() {
        let x = 223;
        let y = 244;
        let sizeX = 60;
        let sizeY = 10;
        let speed = 5;
        do draw();
        return this;
    }

    /** Dispose of this paddle */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Moves the paddle left by speed. */
    method void moveLeft() {
        if (x > speed) {
            do Screen.setColor(false);
            do Screen.drawRectangle((x + sizeX) - speed, y, x + sizeX, y + sizeY);
            let x = x - (speed);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + speed, y + sizeY);
        }
        return;
    }

    /** Moves the paddle right by speed. */
    method void moveRight() {
        if ((x + sizeX) < (511 - speed)) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + speed, y + sizeY);
            let x = x + (speed);
            do Screen.setColor(true);
            do Screen.drawRectangle((x + sizeX) - speed, y, x + sizeX, y + sizeY);
        }
        return;
    }

    /** Check if the paddle is under the ball */
    method boolean paddleBounce(int ballX, int ballSize) {
        var boolean leftSideIn;
        var boolean rightSideIn;

        let leftSideIn = ((ballX > x) & (ballX < (x + sizeX)));
        let rightSideIn = (((ballX + ballSize) > x) & ((ballX + ballSize) < (x + sizeX)));
        if ( leftSideIn | rightSideIn ) {
            return true;
        } else {
            return false;
        }
    }

    /** Draw the square on screen */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + sizeX, y + sizeY);
        return;
    }
}
